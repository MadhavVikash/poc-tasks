# POC-TASKS
# ðŸ“Œ Linux Security - Exploitation & Hardening (PoC)

This repository demonstrates **firewall and network security misconfigurations** in Linux, including **exploitation and mitigation**.

---

## ðŸ”¹ **Task 3: Firewall & Network Security**

### âœ… **Setup: Installing & Configuring a Basic Web Server**

```bash
# Update system and install Apache web server
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ sudo apt update && sudo apt install -y apache2

# Enable Apache to start on boot
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ sudo systemctl enable apache2

# Start Apache service
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ sudo systemctl start apache2

# Verify Apache is running
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ sudo systemctl status apache2 

# Disable UFW to allow all traffic (Very Insecure!)
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ sudo ufw disable  
```

### âœ… **Exploitation: Brute-Force Attack on SSH**

```bash
# Check open ports on the system
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ sudo ss -tuln

# Scan for open ports using Nmap
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ sudo nmap -sV -sC -A localhost   

# Check ports are open with Netcat
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ nc -zv localhost 80

# Optional: Use Hydra to brute-force SSH (for testing purposes only)
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ hydra -l root -P /usr/share/wordlists/rockyou.txt ssh://localhost
```

### âœ… **Mitigation: Hardening the System with UFW & iptables**

```bash
# Enable UFW firewall
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ sudo ufw enable           

# Allow only SSH (22) and HTTP (80)
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ sudo ufw allow 22/tcp
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ sudo ufw allow 80/tcp

# Set default UFW rules to block other traffic
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ sudo ufw default deny incoming
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ sudo ufw default allow outgoing

# Verify UFW rules
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ sudo ufw status verbose       

# Implement iptables rules to further restrict access
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT

# Drop all other inbound traffic (optional, increases security)
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ sudo iptables -P INPUT DROP

# Save iptables rules
â”Œâ”€â”€(kaliã‰¿kali)-[~]
â””â”€$ sudo netfilter-persistent save                    
```

## ðŸ“Œ Task 3 - Summary  

| **Step**              | **Action**                                         | **Command**                                  |
|----------------------|-------------------------------------------------|---------------------------------------------|
| ðŸ”¹ **Setup**          | Install and start Apache2 web server            | `sudo apt update && sudo apt install -y apache2`<br>`sudo systemctl enable apache2`<br>`sudo systemctl start apache2` |
|                      | Verify Apache is running                        | `sudo systemctl status apache2` |
|                      | Disable UFW to allow all traffic (INSECURE)      | `sudo ufw disable` |
| ðŸ”¹ **Exploitation**   | Check open ports using ss                   | `sudo ss -tuln` |
|                      | Scan for open ports using Nmap                   | `sudo nmap -sV -sC -A localhost` |
|                      | Check specific port availability with Netcat     | `nc -zv localhost 80` |
|                      | Optional: Brute-force SSH (for testing)          | `hydra -l root -P /usr/share/wordlists/rockyou.txt ssh://localhost` |
| ðŸ”¹ **Mitigation (UFW)** | Enable UFW and allow only SSH & HTTP            | `sudo ufw enable`<br>`sudo ufw allow 22/tcp`<br>`sudo ufw allow 80/tcp` |
|                      | Set default UFW rules (deny incoming, allow outgoing) | `sudo ufw default deny incoming`<br>`sudo ufw default allow outgoing` |
|                      | Verify UFW rules                                 | `sudo ufw status verbose` |
| ðŸ”¹ **Mitigation (iptables)** | Allow only SSH & HTTP traffic using iptables | `sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT`<br>`sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT` |
|                      | Drop all other inbound traffic (optional)         | `sudo iptables -P INPUT DROP` |
|                      | Save iptables rules                              | `sudo netfilter-persistent save` |

---
 ### END -x-
